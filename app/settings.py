"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import pymysql
from decouple import config, Csv
import dj_database_url

# Inicializa o pymysql para que o Django o use como driver do MySQL
pymysql.install_as_MySQLdb()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# ==============================================================================
# CONFIGURAÇÕES DE SEGURANÇA E CORE
# ==============================================================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Hosts permitidos (carregados do .env)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())

# Origens confiáveis para requisições CSRF (essencial para segurança)
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='', cast=Csv())


# ==============================================================================
# APLICAÇÕES E MIDDLEWARE
# ==============================================================================

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_htmx',
    
    # Seus aplicativos personalizados
    'wefixhub',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise deve vir logo após o SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
]


# ==============================================================================
# CONFIGURAÇÕES DE URL E TEMPLATES
# ==============================================================================

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Pasta de templates na raiz do projeto
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# ==============================================================================
# BANCO DE DADOS
# ==============================================================================

# Tenta carregar a DATABASE_URL (ideal para produção/serviços como Railway).
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.config(default=DATABASE_URL, conn_max_age=600, ssl_require=False)
    }
else:
    # Fallback para configurações locais se DATABASE_URL não estiver definida.
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config('MYSQLDATABASE'),
            'USER': config('MYSQLUSER'),
            'PASSWORD': config('MYSQLPASSWORD'),
            'HOST': config('MYSQLHOST'),
            'PORT': config('MYSQLPORT', cast=int),
        }
    }


# ==============================================================================
# VALIDAÇÃO DE SENHAS
# ==============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# ==============================================================================
# INTERNACIONALIZAÇÃO
# ==============================================================================

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True


# ==============================================================================
# ARQUIVOS ESTÁTICOS E DE MÍDIA
# ==============================================================================

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Diretórios onde o Django procura por arquivos estáticos (além das pastas de apps).
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Diretório para onde o `collectstatic` irá copiar os arquivos para produção.
STATIC_ROOT = BASE_DIR / 'staticfiles_collect'

# Armazenamento otimizado do WhiteNoise para produção.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (arquivos enviados por usuários)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# ==============================================================================
# OUTRAS CONFIGURAÇÕES
# ==============================================================================

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configurações de redirecionamento de login/logout
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'
LOGOUT_REDIRECT_URL = '/accounts/login/'